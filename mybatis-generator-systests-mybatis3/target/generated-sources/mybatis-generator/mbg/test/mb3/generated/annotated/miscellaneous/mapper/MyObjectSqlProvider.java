package mbg.test.mb3.generated.annotated.miscellaneous.mapper;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.ORDER_BY;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT_DISTINCT;
import static org.apache.ibatis.jdbc.SqlBuilder.SET;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.UPDATE;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import java.util.List;
import java.util.Map;
import mbg.test.mb3.generated.annotated.miscellaneous.model.MyObject;
import mbg.test.mb3.generated.annotated.miscellaneous.model.MyObjectCriteria.Criteria;
import mbg.test.mb3.generated.annotated.miscellaneous.model.MyObjectCriteria.Criterion;
import mbg.test.mb3.generated.annotated.miscellaneous.model.MyObjectCriteria;

public class MyObjectSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbggenerated
     */
    public String countByExample(MyObjectCriteria example) {
        BEGIN();
        SELECT("count(*)");
        FROM("PKFIELDS A");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbggenerated
     */
    public String deleteByExample(MyObjectCriteria example) {
        BEGIN();
        DELETE_FROM("PKFIELDS A");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbggenerated
     */
    public String insertSelective(MyObject record) {
        BEGIN();
        INSERT_INTO("PKFIELDS");
        
        if (record.getId2() != null) {
            VALUES("ID2", "#{id2,jdbcType=INTEGER}");
        }
        
        if (record.getId1() != null) {
            VALUES("ID1", "#{id1,jdbcType=INTEGER}");
        }
        
        if (record.getFirstname() != null) {
            VALUES("FIRSTNAME", "#{firstname,jdbcType=VARCHAR,typeHandler=mbg.test.mb3.common.FirstNameTypeHandler}");
        }
        
        if (record.getLastname() != null) {
            VALUES("LASTNAME", "#{lastname,jdbcType=VARCHAR}");
        }
        
        if (record.getStartDate() != null) {
            VALUES("DATEFIELD", "#{startDate,jdbcType=DATE}");
        }
        
        if (record.getTimefield() != null) {
            VALUES("TIMEFIELD", "#{timefield,jdbcType=TIME,typeHandler=mbg.test.mb3.common.MyTimeTypeHandler}");
        }
        
        if (record.getTimestampfield() != null) {
            VALUES("TIMESTAMPFIELD", "#{timestampfield,jdbcType=TIMESTAMP}");
        }
        
        VALUES("DECIMAL60FIELD", "#{decimal60field,jdbcType=DECIMAL}");
        
        if (record.getDecimal100field() != null) {
            VALUES("DECIMAL100FIELD", "#{decimal100field,jdbcType=DECIMAL}");
        }
        
        if (record.getDecimal155field() != null) {
            VALUES("DECIMAL155FIELD", "#{decimal155field,jdbcType=DECIMAL}");
        }
        
        if (record.getWierdField() != null) {
            VALUES("\"wierd$Field\"", "#{wierdField,jdbcType=INTEGER}");
        }
        
        if (record.getBirthDate() != null) {
            VALUES("\"birth date\"", "#{birthDate,jdbcType=DATE}");
        }
        
        if (record.getStringboolean() != null) {
            VALUES("STRINGBOOLEAN", "#{stringboolean,jdbcType=CHAR}");
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbggenerated
     */
    public String selectByExample(MyObjectCriteria example) {
        BEGIN();
        if (example != null && example.isDistinct()) {
            SELECT_DISTINCT("A.ID2 as A_ID2");
        } else {
            SELECT("A.ID2 as A_ID2");
        }
        SELECT("A.ID1 as A_ID1");
        SELECT("A.FIRSTNAME as A_FIRSTNAME");
        SELECT("A.LASTNAME as A_LASTNAME");
        SELECT("A.DATEFIELD as A_DATEFIELD");
        SELECT("A.TIMEFIELD as A_TIMEFIELD");
        SELECT("A.TIMESTAMPFIELD as A_TIMESTAMPFIELD");
        SELECT("A.DECIMAL60FIELD as A_DECIMAL60FIELD");
        SELECT("A.DECIMAL100FIELD as A_DECIMAL100FIELD");
        SELECT("A.DECIMAL155FIELD as A_DECIMAL155FIELD");
        SELECT("A.\"wierd$Field\" as \"A_wierd$Field\"");
        SELECT("A.\"birth date\" as \"A_birth date\"");
        SELECT("A.STRINGBOOLEAN as A_STRINGBOOLEAN");
        FROM("PKFIELDS A");
        applyWhere(example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            ORDER_BY(example.getOrderByClause());
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbggenerated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        MyObject record = (MyObject) parameter.get("record");
        MyObjectCriteria example = (MyObjectCriteria) parameter.get("example");
        
        BEGIN();
        UPDATE("PKFIELDS A");
        
        if (record.getId2() != null) {
            SET("A.ID2 = #{record.id2,jdbcType=INTEGER}");
        }
        
        if (record.getId1() != null) {
            SET("A.ID1 = #{record.id1,jdbcType=INTEGER}");
        }
        
        if (record.getFirstname() != null) {
            SET("A.FIRSTNAME = #{record.firstname,jdbcType=VARCHAR,typeHandler=mbg.test.mb3.common.FirstNameTypeHandler}");
        }
        
        if (record.getLastname() != null) {
            SET("A.LASTNAME = #{record.lastname,jdbcType=VARCHAR}");
        }
        
        if (record.getStartDate() != null) {
            SET("A.DATEFIELD = #{record.startDate,jdbcType=DATE}");
        }
        
        if (record.getTimefield() != null) {
            SET("A.TIMEFIELD = #{record.timefield,jdbcType=TIME,typeHandler=mbg.test.mb3.common.MyTimeTypeHandler}");
        }
        
        if (record.getTimestampfield() != null) {
            SET("A.TIMESTAMPFIELD = #{record.timestampfield,jdbcType=TIMESTAMP}");
        }
        
        SET("A.DECIMAL60FIELD = #{record.decimal60field,jdbcType=DECIMAL}");
        
        if (record.getDecimal100field() != null) {
            SET("A.DECIMAL100FIELD = #{record.decimal100field,jdbcType=DECIMAL}");
        }
        
        if (record.getDecimal155field() != null) {
            SET("A.DECIMAL155FIELD = #{record.decimal155field,jdbcType=DECIMAL}");
        }
        
        if (record.getWierdField() != null) {
            SET("A.\"wierd$Field\" = #{record.wierdField,jdbcType=INTEGER}");
        }
        
        if (record.getBirthDate() != null) {
            SET("A.\"birth date\" = #{record.birthDate,jdbcType=DATE}");
        }
        
        if (record.getStringboolean() != null) {
            SET("A.STRINGBOOLEAN = #{record.stringboolean,jdbcType=CHAR}");
        }
        
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbggenerated
     */
    public String updateByExample(Map<String, Object> parameter) {
        BEGIN();
        UPDATE("PKFIELDS A");
        
        SET("A.ID2 = #{record.id2,jdbcType=INTEGER}");
        SET("A.ID1 = #{record.id1,jdbcType=INTEGER}");
        SET("A.FIRSTNAME = #{record.firstname,jdbcType=VARCHAR,typeHandler=mbg.test.mb3.common.FirstNameTypeHandler}");
        SET("A.LASTNAME = #{record.lastname,jdbcType=VARCHAR}");
        SET("A.DATEFIELD = #{record.startDate,jdbcType=DATE}");
        SET("A.TIMEFIELD = #{record.timefield,jdbcType=TIME,typeHandler=mbg.test.mb3.common.MyTimeTypeHandler}");
        SET("A.TIMESTAMPFIELD = #{record.timestampfield,jdbcType=TIMESTAMP}");
        SET("A.DECIMAL60FIELD = #{record.decimal60field,jdbcType=DECIMAL}");
        SET("A.DECIMAL100FIELD = #{record.decimal100field,jdbcType=DECIMAL}");
        SET("A.DECIMAL155FIELD = #{record.decimal155field,jdbcType=DECIMAL}");
        SET("A.\"wierd$Field\" = #{record.wierdField,jdbcType=INTEGER}");
        SET("A.\"birth date\" = #{record.birthDate,jdbcType=DATE}");
        SET("A.STRINGBOOLEAN = #{record.stringboolean,jdbcType=CHAR}");
        
        MyObjectCriteria example = (MyObjectCriteria) parameter.get("example");
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbggenerated
     */
    public String updateByPrimaryKeySelective(MyObject record) {
        BEGIN();
        UPDATE("PKFIELDS");
        
        if (record.getFirstname() != null) {
            SET("FIRSTNAME = #{firstname,jdbcType=VARCHAR,typeHandler=mbg.test.mb3.common.FirstNameTypeHandler}");
        }
        
        if (record.getLastname() != null) {
            SET("LASTNAME = #{lastname,jdbcType=VARCHAR}");
        }
        
        if (record.getStartDate() != null) {
            SET("DATEFIELD = #{startDate,jdbcType=DATE}");
        }
        
        if (record.getTimefield() != null) {
            SET("TIMEFIELD = #{timefield,jdbcType=TIME,typeHandler=mbg.test.mb3.common.MyTimeTypeHandler}");
        }
        
        if (record.getTimestampfield() != null) {
            SET("TIMESTAMPFIELD = #{timestampfield,jdbcType=TIMESTAMP}");
        }
        
        SET("DECIMAL60FIELD = #{decimal60field,jdbcType=DECIMAL}");
        
        if (record.getDecimal100field() != null) {
            SET("DECIMAL100FIELD = #{decimal100field,jdbcType=DECIMAL}");
        }
        
        if (record.getDecimal155field() != null) {
            SET("DECIMAL155FIELD = #{decimal155field,jdbcType=DECIMAL}");
        }
        
        if (record.getWierdField() != null) {
            SET("\"wierd$Field\" = #{wierdField,jdbcType=INTEGER}");
        }
        
        if (record.getBirthDate() != null) {
            SET("\"birth date\" = #{birthDate,jdbcType=DATE}");
        }
        
        if (record.getStringboolean() != null) {
            SET("STRINGBOOLEAN = #{stringboolean,jdbcType=CHAR}");
        }
        
        WHERE("ID2 = #{id2,jdbcType=INTEGER}");
        WHERE("ID1 = #{id1,jdbcType=INTEGER}");
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbggenerated
     */
    protected void applyWhere(MyObjectCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            WHERE(sb.toString());
        }
    }
}