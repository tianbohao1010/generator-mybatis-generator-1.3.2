package mbg.test.ib2j5.generated.flat.model;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class PkfieldsExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table PKFIELDS
     *
     * @mbggenerated Thu Dec 21 14:43:57 CST 2017
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table PKFIELDS
     *
     * @mbggenerated Thu Dec 21 14:43:57 CST 2017
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table PKFIELDS
     *
     * @mbggenerated Thu Dec 21 14:43:57 CST 2017
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbggenerated Thu Dec 21 14:43:57 CST 2017
     */
    public PkfieldsExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbggenerated Thu Dec 21 14:43:57 CST 2017
     */
    protected PkfieldsExample(PkfieldsExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
        this.distinct = example.distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbggenerated Thu Dec 21 14:43:57 CST 2017
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbggenerated Thu Dec 21 14:43:57 CST 2017
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbggenerated Thu Dec 21 14:43:57 CST 2017
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbggenerated Thu Dec 21 14:43:57 CST 2017
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbggenerated Thu Dec 21 14:43:57 CST 2017
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbggenerated Thu Dec 21 14:43:57 CST 2017
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbggenerated Thu Dec 21 14:43:57 CST 2017
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbggenerated Thu Dec 21 14:43:57 CST 2017
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbggenerated Thu Dec 21 14:43:57 CST 2017
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PKFIELDS
     *
     * @mbggenerated Thu Dec 21 14:43:57 CST 2017
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table PKFIELDS
     *
     * @mbggenerated Thu Dec 21 14:43:57 CST 2017
     */
    protected abstract static class GeneratedCriteria {
        protected List<Map<String, Object>> stringbooleanCriteriaWithSingleValue;

        protected List<Map<String, Object>> stringbooleanCriteriaWithListValue;

        protected List<Map<String, Object>> stringbooleanCriteriaWithBetweenValue;

        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected GeneratedCriteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
            stringbooleanCriteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            stringbooleanCriteriaWithListValue = new ArrayList<Map<String, Object>>();
            stringbooleanCriteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public List<Map<String, Object>> getStringbooleanCriteriaWithSingleValue() {
            return stringbooleanCriteriaWithSingleValue;
        }

        public List<Map<String, Object>> getStringbooleanCriteriaWithListValue() {
            return stringbooleanCriteriaWithListValue;
        }

        public List<Map<String, Object>> getStringbooleanCriteriaWithBetweenValue() {
            return stringbooleanCriteriaWithBetweenValue;
        }

        protected void addStringbooleanCriterion(String condition, Boolean value, String property) {
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            stringbooleanCriteriaWithSingleValue.add(map);
        }

        protected void addStringbooleanCriterion(String condition, List<Boolean> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            stringbooleanCriteriaWithListValue.add(map);
        }

        protected void addStringbooleanCriterion(String condition, Boolean value1, Boolean value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Boolean> list = new ArrayList<Boolean>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            stringbooleanCriteriaWithBetweenValue.add(map);
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0
                || stringbooleanCriteriaWithSingleValue.size() > 0
                || stringbooleanCriteriaWithListValue.size() > 0
                || stringbooleanCriteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        protected void addCriterionForJDBCTime(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Time(value.getTime()), property);
        }

        protected void addCriterionForJDBCTime(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Time> timeList = new ArrayList<java.sql.Time>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                timeList.add(new java.sql.Time(iter.next().getTime()));
            }
            addCriterion(condition, timeList, property);
        }

        protected void addCriterionForJDBCTime(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Time(value1.getTime()), new java.sql.Time(value2.getTime()), property);
        }

        public Criteria andId2IsNull() {
            addCriterion("B.ID2 is null");
            return (Criteria) this;
        }

        public Criteria andId2IsNotNull() {
            addCriterion("B.ID2 is not null");
            return (Criteria) this;
        }

        public Criteria andId2EqualTo(Integer value) {
            addCriterion("B.ID2 =", value, "id2");
            return (Criteria) this;
        }

        public Criteria andId2NotEqualTo(Integer value) {
            addCriterion("B.ID2 <>", value, "id2");
            return (Criteria) this;
        }

        public Criteria andId2GreaterThan(Integer value) {
            addCriterion("B.ID2 >", value, "id2");
            return (Criteria) this;
        }

        public Criteria andId2GreaterThanOrEqualTo(Integer value) {
            addCriterion("B.ID2 >=", value, "id2");
            return (Criteria) this;
        }

        public Criteria andId2LessThan(Integer value) {
            addCriterion("B.ID2 <", value, "id2");
            return (Criteria) this;
        }

        public Criteria andId2LessThanOrEqualTo(Integer value) {
            addCriterion("B.ID2 <=", value, "id2");
            return (Criteria) this;
        }

        public Criteria andId2In(List<Integer> values) {
            addCriterion("B.ID2 in", values, "id2");
            return (Criteria) this;
        }

        public Criteria andId2NotIn(List<Integer> values) {
            addCriterion("B.ID2 not in", values, "id2");
            return (Criteria) this;
        }

        public Criteria andId2Between(Integer value1, Integer value2) {
            addCriterion("B.ID2 between", value1, value2, "id2");
            return (Criteria) this;
        }

        public Criteria andId2NotBetween(Integer value1, Integer value2) {
            addCriterion("B.ID2 not between", value1, value2, "id2");
            return (Criteria) this;
        }

        public Criteria andId1IsNull() {
            addCriterion("B.ID1 is null");
            return (Criteria) this;
        }

        public Criteria andId1IsNotNull() {
            addCriterion("B.ID1 is not null");
            return (Criteria) this;
        }

        public Criteria andId1EqualTo(Integer value) {
            addCriterion("B.ID1 =", value, "id1");
            return (Criteria) this;
        }

        public Criteria andId1NotEqualTo(Integer value) {
            addCriterion("B.ID1 <>", value, "id1");
            return (Criteria) this;
        }

        public Criteria andId1GreaterThan(Integer value) {
            addCriterion("B.ID1 >", value, "id1");
            return (Criteria) this;
        }

        public Criteria andId1GreaterThanOrEqualTo(Integer value) {
            addCriterion("B.ID1 >=", value, "id1");
            return (Criteria) this;
        }

        public Criteria andId1LessThan(Integer value) {
            addCriterion("B.ID1 <", value, "id1");
            return (Criteria) this;
        }

        public Criteria andId1LessThanOrEqualTo(Integer value) {
            addCriterion("B.ID1 <=", value, "id1");
            return (Criteria) this;
        }

        public Criteria andId1In(List<Integer> values) {
            addCriterion("B.ID1 in", values, "id1");
            return (Criteria) this;
        }

        public Criteria andId1NotIn(List<Integer> values) {
            addCriterion("B.ID1 not in", values, "id1");
            return (Criteria) this;
        }

        public Criteria andId1Between(Integer value1, Integer value2) {
            addCriterion("B.ID1 between", value1, value2, "id1");
            return (Criteria) this;
        }

        public Criteria andId1NotBetween(Integer value1, Integer value2) {
            addCriterion("B.ID1 not between", value1, value2, "id1");
            return (Criteria) this;
        }

        public Criteria andFirstnameIsNull() {
            addCriterion("B.FIRSTNAME is null");
            return (Criteria) this;
        }

        public Criteria andFirstnameIsNotNull() {
            addCriterion("B.FIRSTNAME is not null");
            return (Criteria) this;
        }

        public Criteria andFirstnameEqualTo(String value) {
            addCriterion("B.FIRSTNAME =", value, "firstname");
            return (Criteria) this;
        }

        public Criteria andFirstnameNotEqualTo(String value) {
            addCriterion("B.FIRSTNAME <>", value, "firstname");
            return (Criteria) this;
        }

        public Criteria andFirstnameGreaterThan(String value) {
            addCriterion("B.FIRSTNAME >", value, "firstname");
            return (Criteria) this;
        }

        public Criteria andFirstnameGreaterThanOrEqualTo(String value) {
            addCriterion("B.FIRSTNAME >=", value, "firstname");
            return (Criteria) this;
        }

        public Criteria andFirstnameLessThan(String value) {
            addCriterion("B.FIRSTNAME <", value, "firstname");
            return (Criteria) this;
        }

        public Criteria andFirstnameLessThanOrEqualTo(String value) {
            addCriterion("B.FIRSTNAME <=", value, "firstname");
            return (Criteria) this;
        }

        public Criteria andFirstnameLike(String value) {
            addCriterion("B.FIRSTNAME like", value, "firstname");
            return (Criteria) this;
        }

        public Criteria andFirstnameNotLike(String value) {
            addCriterion("B.FIRSTNAME not like", value, "firstname");
            return (Criteria) this;
        }

        public Criteria andFirstnameIn(List<String> values) {
            addCriterion("B.FIRSTNAME in", values, "firstname");
            return (Criteria) this;
        }

        public Criteria andFirstnameNotIn(List<String> values) {
            addCriterion("B.FIRSTNAME not in", values, "firstname");
            return (Criteria) this;
        }

        public Criteria andFirstnameBetween(String value1, String value2) {
            addCriterion("B.FIRSTNAME between", value1, value2, "firstname");
            return (Criteria) this;
        }

        public Criteria andFirstnameNotBetween(String value1, String value2) {
            addCriterion("B.FIRSTNAME not between", value1, value2, "firstname");
            return (Criteria) this;
        }

        public Criteria andLastnameIsNull() {
            addCriterion("B.LASTNAME is null");
            return (Criteria) this;
        }

        public Criteria andLastnameIsNotNull() {
            addCriterion("B.LASTNAME is not null");
            return (Criteria) this;
        }

        public Criteria andLastnameEqualTo(String value) {
            addCriterion("B.LASTNAME =", value, "lastname");
            return (Criteria) this;
        }

        public Criteria andLastnameNotEqualTo(String value) {
            addCriterion("B.LASTNAME <>", value, "lastname");
            return (Criteria) this;
        }

        public Criteria andLastnameGreaterThan(String value) {
            addCriterion("B.LASTNAME >", value, "lastname");
            return (Criteria) this;
        }

        public Criteria andLastnameGreaterThanOrEqualTo(String value) {
            addCriterion("B.LASTNAME >=", value, "lastname");
            return (Criteria) this;
        }

        public Criteria andLastnameLessThan(String value) {
            addCriterion("B.LASTNAME <", value, "lastname");
            return (Criteria) this;
        }

        public Criteria andLastnameLessThanOrEqualTo(String value) {
            addCriterion("B.LASTNAME <=", value, "lastname");
            return (Criteria) this;
        }

        public Criteria andLastnameLike(String value) {
            addCriterion("B.LASTNAME like", value, "lastname");
            return (Criteria) this;
        }

        public Criteria andLastnameNotLike(String value) {
            addCriterion("B.LASTNAME not like", value, "lastname");
            return (Criteria) this;
        }

        public Criteria andLastnameIn(List<String> values) {
            addCriterion("B.LASTNAME in", values, "lastname");
            return (Criteria) this;
        }

        public Criteria andLastnameNotIn(List<String> values) {
            addCriterion("B.LASTNAME not in", values, "lastname");
            return (Criteria) this;
        }

        public Criteria andLastnameBetween(String value1, String value2) {
            addCriterion("B.LASTNAME between", value1, value2, "lastname");
            return (Criteria) this;
        }

        public Criteria andLastnameNotBetween(String value1, String value2) {
            addCriterion("B.LASTNAME not between", value1, value2, "lastname");
            return (Criteria) this;
        }

        public Criteria andDatefieldIsNull() {
            addCriterion("B.DATEFIELD is null");
            return (Criteria) this;
        }

        public Criteria andDatefieldIsNotNull() {
            addCriterion("B.DATEFIELD is not null");
            return (Criteria) this;
        }

        public Criteria andDatefieldEqualTo(Date value) {
            addCriterionForJDBCDate("B.DATEFIELD =", value, "datefield");
            return (Criteria) this;
        }

        public Criteria andDatefieldNotEqualTo(Date value) {
            addCriterionForJDBCDate("B.DATEFIELD <>", value, "datefield");
            return (Criteria) this;
        }

        public Criteria andDatefieldGreaterThan(Date value) {
            addCriterionForJDBCDate("B.DATEFIELD >", value, "datefield");
            return (Criteria) this;
        }

        public Criteria andDatefieldGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("B.DATEFIELD >=", value, "datefield");
            return (Criteria) this;
        }

        public Criteria andDatefieldLessThan(Date value) {
            addCriterionForJDBCDate("B.DATEFIELD <", value, "datefield");
            return (Criteria) this;
        }

        public Criteria andDatefieldLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("B.DATEFIELD <=", value, "datefield");
            return (Criteria) this;
        }

        public Criteria andDatefieldIn(List<Date> values) {
            addCriterionForJDBCDate("B.DATEFIELD in", values, "datefield");
            return (Criteria) this;
        }

        public Criteria andDatefieldNotIn(List<Date> values) {
            addCriterionForJDBCDate("B.DATEFIELD not in", values, "datefield");
            return (Criteria) this;
        }

        public Criteria andDatefieldBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("B.DATEFIELD between", value1, value2, "datefield");
            return (Criteria) this;
        }

        public Criteria andDatefieldNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("B.DATEFIELD not between", value1, value2, "datefield");
            return (Criteria) this;
        }

        public Criteria andTimefieldIsNull() {
            addCriterion("B.TIMEFIELD is null");
            return (Criteria) this;
        }

        public Criteria andTimefieldIsNotNull() {
            addCriterion("B.TIMEFIELD is not null");
            return (Criteria) this;
        }

        public Criteria andTimefieldEqualTo(Date value) {
            addCriterionForJDBCTime("B.TIMEFIELD =", value, "timefield");
            return (Criteria) this;
        }

        public Criteria andTimefieldNotEqualTo(Date value) {
            addCriterionForJDBCTime("B.TIMEFIELD <>", value, "timefield");
            return (Criteria) this;
        }

        public Criteria andTimefieldGreaterThan(Date value) {
            addCriterionForJDBCTime("B.TIMEFIELD >", value, "timefield");
            return (Criteria) this;
        }

        public Criteria andTimefieldGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCTime("B.TIMEFIELD >=", value, "timefield");
            return (Criteria) this;
        }

        public Criteria andTimefieldLessThan(Date value) {
            addCriterionForJDBCTime("B.TIMEFIELD <", value, "timefield");
            return (Criteria) this;
        }

        public Criteria andTimefieldLessThanOrEqualTo(Date value) {
            addCriterionForJDBCTime("B.TIMEFIELD <=", value, "timefield");
            return (Criteria) this;
        }

        public Criteria andTimefieldIn(List<Date> values) {
            addCriterionForJDBCTime("B.TIMEFIELD in", values, "timefield");
            return (Criteria) this;
        }

        public Criteria andTimefieldNotIn(List<Date> values) {
            addCriterionForJDBCTime("B.TIMEFIELD not in", values, "timefield");
            return (Criteria) this;
        }

        public Criteria andTimefieldBetween(Date value1, Date value2) {
            addCriterionForJDBCTime("B.TIMEFIELD between", value1, value2, "timefield");
            return (Criteria) this;
        }

        public Criteria andTimefieldNotBetween(Date value1, Date value2) {
            addCriterionForJDBCTime("B.TIMEFIELD not between", value1, value2, "timefield");
            return (Criteria) this;
        }

        public Criteria andTimestampfieldIsNull() {
            addCriterion("B.TIMESTAMPFIELD is null");
            return (Criteria) this;
        }

        public Criteria andTimestampfieldIsNotNull() {
            addCriterion("B.TIMESTAMPFIELD is not null");
            return (Criteria) this;
        }

        public Criteria andTimestampfieldEqualTo(Date value) {
            addCriterion("B.TIMESTAMPFIELD =", value, "timestampfield");
            return (Criteria) this;
        }

        public Criteria andTimestampfieldNotEqualTo(Date value) {
            addCriterion("B.TIMESTAMPFIELD <>", value, "timestampfield");
            return (Criteria) this;
        }

        public Criteria andTimestampfieldGreaterThan(Date value) {
            addCriterion("B.TIMESTAMPFIELD >", value, "timestampfield");
            return (Criteria) this;
        }

        public Criteria andTimestampfieldGreaterThanOrEqualTo(Date value) {
            addCriterion("B.TIMESTAMPFIELD >=", value, "timestampfield");
            return (Criteria) this;
        }

        public Criteria andTimestampfieldLessThan(Date value) {
            addCriterion("B.TIMESTAMPFIELD <", value, "timestampfield");
            return (Criteria) this;
        }

        public Criteria andTimestampfieldLessThanOrEqualTo(Date value) {
            addCriterion("B.TIMESTAMPFIELD <=", value, "timestampfield");
            return (Criteria) this;
        }

        public Criteria andTimestampfieldIn(List<Date> values) {
            addCriterion("B.TIMESTAMPFIELD in", values, "timestampfield");
            return (Criteria) this;
        }

        public Criteria andTimestampfieldNotIn(List<Date> values) {
            addCriterion("B.TIMESTAMPFIELD not in", values, "timestampfield");
            return (Criteria) this;
        }

        public Criteria andTimestampfieldBetween(Date value1, Date value2) {
            addCriterion("B.TIMESTAMPFIELD between", value1, value2, "timestampfield");
            return (Criteria) this;
        }

        public Criteria andTimestampfieldNotBetween(Date value1, Date value2) {
            addCriterion("B.TIMESTAMPFIELD not between", value1, value2, "timestampfield");
            return (Criteria) this;
        }

        public Criteria andDecimal30fieldIsNull() {
            addCriterion("B.DECIMAL30FIELD is null");
            return (Criteria) this;
        }

        public Criteria andDecimal30fieldIsNotNull() {
            addCriterion("B.DECIMAL30FIELD is not null");
            return (Criteria) this;
        }

        public Criteria andDecimal30fieldEqualTo(Short value) {
            addCriterion("B.DECIMAL30FIELD =", value, "decimal30field");
            return (Criteria) this;
        }

        public Criteria andDecimal30fieldNotEqualTo(Short value) {
            addCriterion("B.DECIMAL30FIELD <>", value, "decimal30field");
            return (Criteria) this;
        }

        public Criteria andDecimal30fieldGreaterThan(Short value) {
            addCriterion("B.DECIMAL30FIELD >", value, "decimal30field");
            return (Criteria) this;
        }

        public Criteria andDecimal30fieldGreaterThanOrEqualTo(Short value) {
            addCriterion("B.DECIMAL30FIELD >=", value, "decimal30field");
            return (Criteria) this;
        }

        public Criteria andDecimal30fieldLessThan(Short value) {
            addCriterion("B.DECIMAL30FIELD <", value, "decimal30field");
            return (Criteria) this;
        }

        public Criteria andDecimal30fieldLessThanOrEqualTo(Short value) {
            addCriterion("B.DECIMAL30FIELD <=", value, "decimal30field");
            return (Criteria) this;
        }

        public Criteria andDecimal30fieldIn(List<Short> values) {
            addCriterion("B.DECIMAL30FIELD in", values, "decimal30field");
            return (Criteria) this;
        }

        public Criteria andDecimal30fieldNotIn(List<Short> values) {
            addCriterion("B.DECIMAL30FIELD not in", values, "decimal30field");
            return (Criteria) this;
        }

        public Criteria andDecimal30fieldBetween(Short value1, Short value2) {
            addCriterion("B.DECIMAL30FIELD between", value1, value2, "decimal30field");
            return (Criteria) this;
        }

        public Criteria andDecimal30fieldNotBetween(Short value1, Short value2) {
            addCriterion("B.DECIMAL30FIELD not between", value1, value2, "decimal30field");
            return (Criteria) this;
        }

        public Criteria andDecimal60fieldIsNull() {
            addCriterion("B.DECIMAL60FIELD is null");
            return (Criteria) this;
        }

        public Criteria andDecimal60fieldIsNotNull() {
            addCriterion("B.DECIMAL60FIELD is not null");
            return (Criteria) this;
        }

        public Criteria andDecimal60fieldEqualTo(Integer value) {
            addCriterion("B.DECIMAL60FIELD =", value, "decimal60field");
            return (Criteria) this;
        }

        public Criteria andDecimal60fieldNotEqualTo(Integer value) {
            addCriterion("B.DECIMAL60FIELD <>", value, "decimal60field");
            return (Criteria) this;
        }

        public Criteria andDecimal60fieldGreaterThan(Integer value) {
            addCriterion("B.DECIMAL60FIELD >", value, "decimal60field");
            return (Criteria) this;
        }

        public Criteria andDecimal60fieldGreaterThanOrEqualTo(Integer value) {
            addCriterion("B.DECIMAL60FIELD >=", value, "decimal60field");
            return (Criteria) this;
        }

        public Criteria andDecimal60fieldLessThan(Integer value) {
            addCriterion("B.DECIMAL60FIELD <", value, "decimal60field");
            return (Criteria) this;
        }

        public Criteria andDecimal60fieldLessThanOrEqualTo(Integer value) {
            addCriterion("B.DECIMAL60FIELD <=", value, "decimal60field");
            return (Criteria) this;
        }

        public Criteria andDecimal60fieldIn(List<Integer> values) {
            addCriterion("B.DECIMAL60FIELD in", values, "decimal60field");
            return (Criteria) this;
        }

        public Criteria andDecimal60fieldNotIn(List<Integer> values) {
            addCriterion("B.DECIMAL60FIELD not in", values, "decimal60field");
            return (Criteria) this;
        }

        public Criteria andDecimal60fieldBetween(Integer value1, Integer value2) {
            addCriterion("B.DECIMAL60FIELD between", value1, value2, "decimal60field");
            return (Criteria) this;
        }

        public Criteria andDecimal60fieldNotBetween(Integer value1, Integer value2) {
            addCriterion("B.DECIMAL60FIELD not between", value1, value2, "decimal60field");
            return (Criteria) this;
        }

        public Criteria andDecimal100fieldIsNull() {
            addCriterion("B.DECIMAL100FIELD is null");
            return (Criteria) this;
        }

        public Criteria andDecimal100fieldIsNotNull() {
            addCriterion("B.DECIMAL100FIELD is not null");
            return (Criteria) this;
        }

        public Criteria andDecimal100fieldEqualTo(Long value) {
            addCriterion("B.DECIMAL100FIELD =", value, "decimal100field");
            return (Criteria) this;
        }

        public Criteria andDecimal100fieldNotEqualTo(Long value) {
            addCriterion("B.DECIMAL100FIELD <>", value, "decimal100field");
            return (Criteria) this;
        }

        public Criteria andDecimal100fieldGreaterThan(Long value) {
            addCriterion("B.DECIMAL100FIELD >", value, "decimal100field");
            return (Criteria) this;
        }

        public Criteria andDecimal100fieldGreaterThanOrEqualTo(Long value) {
            addCriterion("B.DECIMAL100FIELD >=", value, "decimal100field");
            return (Criteria) this;
        }

        public Criteria andDecimal100fieldLessThan(Long value) {
            addCriterion("B.DECIMAL100FIELD <", value, "decimal100field");
            return (Criteria) this;
        }

        public Criteria andDecimal100fieldLessThanOrEqualTo(Long value) {
            addCriterion("B.DECIMAL100FIELD <=", value, "decimal100field");
            return (Criteria) this;
        }

        public Criteria andDecimal100fieldIn(List<Long> values) {
            addCriterion("B.DECIMAL100FIELD in", values, "decimal100field");
            return (Criteria) this;
        }

        public Criteria andDecimal100fieldNotIn(List<Long> values) {
            addCriterion("B.DECIMAL100FIELD not in", values, "decimal100field");
            return (Criteria) this;
        }

        public Criteria andDecimal100fieldBetween(Long value1, Long value2) {
            addCriterion("B.DECIMAL100FIELD between", value1, value2, "decimal100field");
            return (Criteria) this;
        }

        public Criteria andDecimal100fieldNotBetween(Long value1, Long value2) {
            addCriterion("B.DECIMAL100FIELD not between", value1, value2, "decimal100field");
            return (Criteria) this;
        }

        public Criteria andDecimal155fieldIsNull() {
            addCriterion("B.DECIMAL155FIELD is null");
            return (Criteria) this;
        }

        public Criteria andDecimal155fieldIsNotNull() {
            addCriterion("B.DECIMAL155FIELD is not null");
            return (Criteria) this;
        }

        public Criteria andDecimal155fieldEqualTo(BigDecimal value) {
            addCriterion("B.DECIMAL155FIELD =", value, "decimal155field");
            return (Criteria) this;
        }

        public Criteria andDecimal155fieldNotEqualTo(BigDecimal value) {
            addCriterion("B.DECIMAL155FIELD <>", value, "decimal155field");
            return (Criteria) this;
        }

        public Criteria andDecimal155fieldGreaterThan(BigDecimal value) {
            addCriterion("B.DECIMAL155FIELD >", value, "decimal155field");
            return (Criteria) this;
        }

        public Criteria andDecimal155fieldGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("B.DECIMAL155FIELD >=", value, "decimal155field");
            return (Criteria) this;
        }

        public Criteria andDecimal155fieldLessThan(BigDecimal value) {
            addCriterion("B.DECIMAL155FIELD <", value, "decimal155field");
            return (Criteria) this;
        }

        public Criteria andDecimal155fieldLessThanOrEqualTo(BigDecimal value) {
            addCriterion("B.DECIMAL155FIELD <=", value, "decimal155field");
            return (Criteria) this;
        }

        public Criteria andDecimal155fieldIn(List<BigDecimal> values) {
            addCriterion("B.DECIMAL155FIELD in", values, "decimal155field");
            return (Criteria) this;
        }

        public Criteria andDecimal155fieldNotIn(List<BigDecimal> values) {
            addCriterion("B.DECIMAL155FIELD not in", values, "decimal155field");
            return (Criteria) this;
        }

        public Criteria andDecimal155fieldBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("B.DECIMAL155FIELD between", value1, value2, "decimal155field");
            return (Criteria) this;
        }

        public Criteria andDecimal155fieldNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("B.DECIMAL155FIELD not between", value1, value2, "decimal155field");
            return (Criteria) this;
        }

        public Criteria andWierdFieldIsNull() {
            addCriterion("B.\"wierd$Field\" is null");
            return (Criteria) this;
        }

        public Criteria andWierdFieldIsNotNull() {
            addCriterion("B.\"wierd$Field\" is not null");
            return (Criteria) this;
        }

        public Criteria andWierdFieldEqualTo(Integer value) {
            addCriterion("B.\"wierd$Field\" =", value, "wierdField");
            return (Criteria) this;
        }

        public Criteria andWierdFieldNotEqualTo(Integer value) {
            addCriterion("B.\"wierd$Field\" <>", value, "wierdField");
            return (Criteria) this;
        }

        public Criteria andWierdFieldGreaterThan(Integer value) {
            addCriterion("B.\"wierd$Field\" >", value, "wierdField");
            return (Criteria) this;
        }

        public Criteria andWierdFieldGreaterThanOrEqualTo(Integer value) {
            addCriterion("B.\"wierd$Field\" >=", value, "wierdField");
            return (Criteria) this;
        }

        public Criteria andWierdFieldLessThan(Integer value) {
            addCriterion("B.\"wierd$Field\" <", value, "wierdField");
            return (Criteria) this;
        }

        public Criteria andWierdFieldLessThanOrEqualTo(Integer value) {
            addCriterion("B.\"wierd$Field\" <=", value, "wierdField");
            return (Criteria) this;
        }

        public Criteria andWierdFieldIn(List<Integer> values) {
            addCriterion("B.\"wierd$Field\" in", values, "wierdField");
            return (Criteria) this;
        }

        public Criteria andWierdFieldNotIn(List<Integer> values) {
            addCriterion("B.\"wierd$Field\" not in", values, "wierdField");
            return (Criteria) this;
        }

        public Criteria andWierdFieldBetween(Integer value1, Integer value2) {
            addCriterion("B.\"wierd$Field\" between", value1, value2, "wierdField");
            return (Criteria) this;
        }

        public Criteria andWierdFieldNotBetween(Integer value1, Integer value2) {
            addCriterion("B.\"wierd$Field\" not between", value1, value2, "wierdField");
            return (Criteria) this;
        }

        public Criteria andBirthDateIsNull() {
            addCriterion("B.\"birth date\" is null");
            return (Criteria) this;
        }

        public Criteria andBirthDateIsNotNull() {
            addCriterion("B.\"birth date\" is not null");
            return (Criteria) this;
        }

        public Criteria andBirthDateEqualTo(Date value) {
            addCriterionForJDBCDate("B.\"birth date\" =", value, "birthDate");
            return (Criteria) this;
        }

        public Criteria andBirthDateNotEqualTo(Date value) {
            addCriterionForJDBCDate("B.\"birth date\" <>", value, "birthDate");
            return (Criteria) this;
        }

        public Criteria andBirthDateGreaterThan(Date value) {
            addCriterionForJDBCDate("B.\"birth date\" >", value, "birthDate");
            return (Criteria) this;
        }

        public Criteria andBirthDateGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("B.\"birth date\" >=", value, "birthDate");
            return (Criteria) this;
        }

        public Criteria andBirthDateLessThan(Date value) {
            addCriterionForJDBCDate("B.\"birth date\" <", value, "birthDate");
            return (Criteria) this;
        }

        public Criteria andBirthDateLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("B.\"birth date\" <=", value, "birthDate");
            return (Criteria) this;
        }

        public Criteria andBirthDateIn(List<Date> values) {
            addCriterionForJDBCDate("B.\"birth date\" in", values, "birthDate");
            return (Criteria) this;
        }

        public Criteria andBirthDateNotIn(List<Date> values) {
            addCriterionForJDBCDate("B.\"birth date\" not in", values, "birthDate");
            return (Criteria) this;
        }

        public Criteria andBirthDateBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("B.\"birth date\" between", value1, value2, "birthDate");
            return (Criteria) this;
        }

        public Criteria andBirthDateNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("B.\"birth date\" not between", value1, value2, "birthDate");
            return (Criteria) this;
        }

        public Criteria andStringbooleanIsNull() {
            addCriterion("B.STRINGBOOLEAN is null");
            return (Criteria) this;
        }

        public Criteria andStringbooleanIsNotNull() {
            addCriterion("B.STRINGBOOLEAN is not null");
            return (Criteria) this;
        }

        public Criteria andStringbooleanEqualTo(boolean value) {
            addStringbooleanCriterion("B.STRINGBOOLEAN =", value, "stringboolean");
            return (Criteria) this;
        }

        public Criteria andStringbooleanNotEqualTo(boolean value) {
            addStringbooleanCriterion("B.STRINGBOOLEAN <>", value, "stringboolean");
            return (Criteria) this;
        }

        public Criteria andStringbooleanGreaterThan(boolean value) {
            addStringbooleanCriterion("B.STRINGBOOLEAN >", value, "stringboolean");
            return (Criteria) this;
        }

        public Criteria andStringbooleanGreaterThanOrEqualTo(boolean value) {
            addStringbooleanCriterion("B.STRINGBOOLEAN >=", value, "stringboolean");
            return (Criteria) this;
        }

        public Criteria andStringbooleanLessThan(boolean value) {
            addStringbooleanCriterion("B.STRINGBOOLEAN <", value, "stringboolean");
            return (Criteria) this;
        }

        public Criteria andStringbooleanLessThanOrEqualTo(boolean value) {
            addStringbooleanCriterion("B.STRINGBOOLEAN <=", value, "stringboolean");
            return (Criteria) this;
        }

        public Criteria andStringbooleanLike(boolean value) {
            addStringbooleanCriterion("B.STRINGBOOLEAN like", value, "stringboolean");
            return (Criteria) this;
        }

        public Criteria andStringbooleanNotLike(boolean value) {
            addStringbooleanCriterion("B.STRINGBOOLEAN not like", value, "stringboolean");
            return (Criteria) this;
        }

        public Criteria andStringbooleanIn(List<Boolean> values) {
            addStringbooleanCriterion("B.STRINGBOOLEAN in", values, "stringboolean");
            return (Criteria) this;
        }

        public Criteria andStringbooleanNotIn(List<Boolean> values) {
            addStringbooleanCriterion("B.STRINGBOOLEAN not in", values, "stringboolean");
            return (Criteria) this;
        }

        public Criteria andStringbooleanBetween(boolean value1, boolean value2) {
            addStringbooleanCriterion("B.STRINGBOOLEAN between", value1, value2, "stringboolean");
            return (Criteria) this;
        }

        public Criteria andStringbooleanNotBetween(boolean value1, boolean value2) {
            addStringbooleanCriterion("B.STRINGBOOLEAN not between", value1, value2, "stringboolean");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table PKFIELDS
     *
     * @mbggenerated do_not_delete_during_merge Thu Dec 21 14:43:57 CST 2017
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }
}